import { Button, Dialog, DialogContent, DialogContentText, Divider, Stack, TextField } from "@mui/material"
import { isAddress } from "ethers/lib/utils";
import React from "react"

interface EnterBundleDetailsDialogProps {
    handleOk: CallableFunction,
    handleClose: CallableFunction,
    showDialog: boolean,
    isCustom: boolean,
    isFeeless: boolean
    description: string
    displayError: CallableFunction,
    isNFT: boolean
}

export function EnterBundleDetailsDialog(props: EnterBundleDetailsDialogProps) {
    const [bundleValue, setBundleValue] = React.useState("");
    const [bundleSize, setBundleSize] = React.useState("");
    const [tokenAddress, setTokenAddress] = React.useState("");
    const [tokenTicker, setTokenTicker] = React.useState("");
    const [tokenName, setTokenName] = React.useState("");
    const [NFTBaseURI, setNFTBaseURI] = React.useState("");
    const [valuePerNote, setValuePerNote] = React.useState("");

    React.useEffect(() => {

        if (isNaN(parseFloat(bundleValue)) && isNaN(parseFloat(bundleSize))) {

            // setValuePerNote(bundleValue / bundleSize)
        }
    }, [bundleValue, bundleSize]);

    const handleClose = (event: object, reason: string) => {
        if (reason === "backdropClick" || reason === "escapeKeyDown") {
            return
        }
        props.handleClose();
    }

    const calculateValuePerNote = () => { }

    const proceed = () => {
        if (props.isCustom) {
            if (!isAddress(tokenAddress)) {
                props.displayError("Invalid Address");
                return;
            }
            if (tokenTicker === "") {
                props.displayError("Please Enter a Ticker");
                return;
            }
        }

        if (isNaN(parseFloat(bundleSize))) {
            props.displayError("Please enter the correct bundle size")
            return;
        }
        if (parseFloat(bundleSize) === 0) {
            props.displayError("Please enter the correct bundle size");
            return;
        }

        if (parseFloat(bundleSize) > 1000) {
            props.displayError("Bundle too large for webapp. Contact us if you want bigger bundles!");
            return;
        }

        if (isNaN(parseFloat(bundleValue))) {
            props.displayError("Please enter the correct denomination")
            return;
        }
        if (parseFloat(bundleValue) === 0) {
            props.displayError("Please enter the correct denomination");
            return;
        }
        //TODO: Handle Ok should accept NFTs too!!
        props.handleOk(bundleValue, bundleSize, tokenTicker, tokenAddress);
    }


    const renderCustomInputs = () => {
        if (props.isNFT) {

            return <React.Fragment>

                <TextField autoFocus={props.isCustom} sx={{ marginBottom: "10px" }} autoComplete="off" placeholder="Name" label="NFT Name" type={"text"} value={tokenName} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setTokenName(event.target.value);
                }}></TextField>

                <TextField sx={{ marginBottom: "10px" }} autoComplete="off" placeholder="..." label="Symbol" type={"text"} value={tokenTicker} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setTokenTicker(event.target.value);
                }}></TextField>

                <TextField sx={{ marginBottom: "10px" }} autoComplete="off" placeholder="..." label="Base URI" type={"text"} value={NFTBaseURI} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setNFTBaseURI(event.target.value);
                }}></TextField>

            </React.Fragment>

        } else {
            return <React.Fragment>
                <TextField autoFocus={props.isCustom} sx={{ marginBottom: "10px" }} autoComplete="off" placeholder="..." label="Currency (Ticker)" type={"text"} value={tokenTicker} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setTokenTicker(event.target.value);
                }}></TextField>

                <TextField sx={{ marginBottom: "10px" }} autoComplete="off" placeholder="0x" label="Token Address" type={"text"} value={tokenAddress} onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setTokenAddress(event.target.value);
                }}></TextField>
            </React.Fragment>
        }
    }

    const getExplanationText = () => {

        if (props.isNFT) {
            return "You need to deploy a new NFT contract. You users will be able to mint them using a Bunny Note! The base URI must be the url where the metadata is hosted. The tokenId will be the commitment generated by Bunny Notes. You will get more info in the downloads!"
        }

        return props.isFeeless
            ? "The entered denomination is the bundle's total value There is no deposit fee!"
            : "The entered denomination is the bundle's total value. A 1% fee is charged on deposit."

    }


    return <Dialog open={props.showDialog} onClose={handleClose}>
        <DialogContent>
            <Stack sx={{ color: "grey" }} direction={"row"} justifyContent="center">
                {props.description}
            </Stack>
            <Divider sx={{ marginBottom: "10px" }} light />
            <Stack direction="column" justifyContent={"space-around"}>
                {props.isCustom ? renderCustomInputs() : null}

                {props.isNFT ? null : <TextField autoFocus={!props.isCustom}
                    sx={{ marginBottom: "10px" }}
                    autoComplete="off"
                    placeholder="Total bundle value"
                    label="Deposted amount"
                    type={"number"}
                    value={bundleValue}
                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                        setBundleValue(event.target.value);
                    }}></TextField>}



                <TextField sx={{ marginBottom: "10px" }}
                    autoComplete="off"
                    placeholder="Bundle Size (1000 max)"
                    label="Amount of Notes"
                    type={"number"}
                    value={bundleSize}
                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                        setBundleSize(event.target.value);
                    }}></TextField>

                <DialogContentText>
                    {getExplanationText()}
                </DialogContentText>
            </Stack>
            <Divider sx={{ marginBottom: "10px" }} light />
            <Stack direction="row" justifyContent={"space-evenly"}>
                <Button onClick={() => props.handleClose()} variant="outlined">Cancel</Button>
                <Button onClick={() => proceed()} variant="contained">Proceed</Button>
            </Stack>
        </DialogContent>
    </Dialog>
}

