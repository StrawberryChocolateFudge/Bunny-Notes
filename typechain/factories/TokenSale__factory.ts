/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenSale, TokenSaleInterface } from "../TokenSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_wallet_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "purchaser",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensPurchased",
    type: "event",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "weiAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokensLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokensSold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wallet",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weiRaised",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052613a986005556a295be96e6406697200000060065534801561002557600080fd5b50604051610a14380380610a14833981016040819052610044916100fc565b60016000556001600160a01b03821661008a5760405162461bcd60e51b815260206004820152600360248201526207268760eb1b60448201526064015b60405180910390fd5b6001600160a01b0381166100c65760405162461bcd60e51b815260206004820152600360248201526207268760eb1b6044820152606401610081565b600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055600060045561014d565b6000806040838503121561010e578182fd5b825161011981610135565b602084015190925061012a81610135565b809150509250929050565b6001600160a01b038116811461014a57600080fd5b50565b6108b88061015c6000396000f3fe60806040526004361061007f5760003560e01c8063d0febe4c1161004e578063d0febe4c14610123578063de5f98661461012b578063ee7c0db014610140578063fc0c546a1461015557600080fd5b80632c4e722e146100935780634042b66f146100bc578063521eb273146100d1578063c2507ac11461010357600080fd5b3661008e5761008c610173565b005b600080fd5b34801561009f57600080fd5b506100a960055481565b6040519081526020015b60405180910390f35b3480156100c857600080fd5b506003546100a9565b3480156100dd57600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016100b3565b34801561010f57600080fd5b506100a961011e366004610772565b61027b565b61008c610173565b34801561013757600080fd5b506100a9610291565b34801561014c57600080fd5b506004546100a9565b34801561016157600080fd5b506001546001600160a01b03166100eb565b61017b6102af565b346101863382610309565b60006101918261027b565b90506006546101ab600454836103b090919063ffffffff16565b11156101fe5760405162461bcd60e51b815260206004820152601560248201527f4578636565647320616c6c6f776564206c696d6974000000000000000000000060448201526064015b60405180910390fd5b60045461020b90826103b0565b60045560035461021b90836103b0565b60035561022833826103c3565b6040805183815260208101839052339182917f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b910160405180910390a361026d6103cd565b50506102796001600055565b565b60055460009061028b9083610409565b92915050565b60006102aa60045460065461041590919063ffffffff16565b905090565b600260005414156103025760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f5565b6002600055565b6001600160a01b03821661035f5760405162461bcd60e51b815260206004820152601360248201527f496e76616c69642062656e65666963696172790000000000000000000000000060448201526064016101f5565b806103ac5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016101f5565b5050565b60006103bc82846107d9565b9392505050565b6103ac8282610421565b6002546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610406573d6000803e3d6000fd5b50565b60006103bc82846107f1565b60006103bc8284610810565b600254600154604080516001600160a01b0393841660248201819052868516604483015260648083018790528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526103ac9390921691859085906104be9085906104c4565b50505050565b6000610519826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105ae9092919063ffffffff16565b8051909150156105a957808060200190518101906105379190610752565b6105a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101f5565b505050565b60606105bd84846000856105c5565b949350505050565b60608247101561063d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101f5565b600080866001600160a01b03168587604051610659919061078a565b60006040518083038185875af1925050503d8060008114610696576040519150601f19603f3d011682016040523d82523d6000602084013e61069b565b606091505b50915091506106ac878383876106b7565b979650505050505050565b6060831561072357825161071c576001600160a01b0385163b61071c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f5565b50816105bd565b6105bd83838151156107385781518083602001fd5b8060405162461bcd60e51b81526004016101f591906107a6565b600060208284031215610763578081fd5b815180151581146103bc578182fd5b600060208284031215610783578081fd5b5035919050565b6000825161079c818460208701610827565b9190910192915050565b60208152600082518060208401526107c5816040850160208701610827565b601f01601f19169190910160400192915050565b600082198211156107ec576107ec610853565b500190565b600081600019048311821515161561080b5761080b610853565b500290565b60008282101561082257610822610853565b500390565b60005b8381101561084257818101518382015260200161082a565b838111156104be5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212202e3a72770ea367d0aaea09990bcade0087b09f5e3520636795b2bcf1b4bc294c64736f6c63430008040033";

export class TokenSale__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _wallet_: string,
    _token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenSale> {
    return super.deploy(
      _wallet_,
      _token_,
      overrides || {}
    ) as Promise<TokenSale>;
  }
  getDeployTransaction(
    _wallet_: string,
    _token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wallet_, _token_, overrides || {});
  }
  attach(address: string): TokenSale {
    return super.attach(address) as TokenSale;
  }
  connect(signer: Signer): TokenSale__factory {
    return super.connect(signer) as TokenSale__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSaleInterface {
    return new utils.Interface(_abi) as TokenSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSale {
    return new Contract(address, _abi, signerOrProvider) as TokenSale;
  }
}
