/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BunnyDebitInterface extends ethers.utils.Interface {
  functions: {
    "_owner()": FunctionFragment;
    "calculateFee(uint256)": FunctionFragment;
    "cancel(uint256[8],bytes32[2],address,uint256[3])": FunctionFragment;
    "commitments(bytes32)": FunctionFragment;
    "depositEth(bytes32,uint256)": FunctionFragment;
    "depositToken(bytes32,uint256,address)": FunctionFragment;
    "directdebit(uint256[8],bytes32[2],address,uint256[3])": FunctionFragment;
    "feeDivider()": FunctionFragment;
    "feelessToken()": FunctionFragment;
    "nullifiers(bytes32)": FunctionFragment;
    "setFeelessToken(address)": FunctionFragment;
    "topUpETH(bytes32,uint256)": FunctionFragment;
    "topUpTokens(bytes32,uint256)": FunctionFragment;
    "verifier()": FunctionFragment;
    "withdraw(uint256[8],bytes32[2],address,uint256[3])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BytesLike, BytesLike],
      string,
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "directdebit",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BytesLike, BytesLike],
      string,
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDivider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feelessToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeelessToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpETH",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpTokens",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BytesLike, BytesLike],
      string,
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directdebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeDivider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feelessToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeelessToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topUpETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topUpTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BunnyDebitCancelled(bytes32,address,uint256)": EventFragment;
    "CancelDirectDebit(bytes32,bytes32,address)": EventFragment;
    "DepositETH(bytes32,address,uint256,uint256)": EventFragment;
    "DepositToken(bytes32,address,uint256,uint256,address)": EventFragment;
    "DirectDebit(bytes32,bytes32,address,uint256,uint256,uint256)": EventFragment;
    "TopUpETH(bytes32,uint256,uint256)": EventFragment;
    "TopUpToken(bytes32,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BunnyDebitCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelDirectDebit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DirectDebit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TopUpETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TopUpToken"): EventFragment;
}

export type BunnyDebitCancelledEvent = TypedEvent<
  [string, string, BigNumber] & {
    commitment: string;
    tokenAddress: string;
    withdrawn: BigNumber;
  }
>;

export type CancelDirectDebitEvent = TypedEvent<
  [string, string, string] & {
    commitment: string;
    nullifierHash: string;
    payee: string;
  }
>;

export type DepositETHEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    commitment: string;
    depositFor: string;
    timestamp: BigNumber;
    balance: BigNumber;
  }
>;

export type DepositTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    commitment: string;
    depositFor: string;
    timestamp: BigNumber;
    amount: BigNumber;
    token: string;
  }
>;

export type DirectDebitEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    commitment: string;
    nullifierHash: string;
    payee: string;
    debitAmount: BigNumber;
    debitTimesLeft: BigNumber;
    feePaid: BigNumber;
  }
>;

export type TopUpETHEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    commitment: string;
    timestamp: BigNumber;
    balance: BigNumber;
  }
>;

export type TopUpTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    commitment: string;
    timestamp: BigNumber;
    amount: BigNumber;
    token: string;
  }
>;

export class BunnyDebit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BunnyDebitInterface;

  functions: {
    _owner(overrides?: CallOverrides): Promise<[string]>;

    calculateFee(
      denomination: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    cancel(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, boolean, string, BigNumber] & {
        used: boolean;
        creator: string;
        createdDate: BigNumber;
        usesToken: boolean;
        token: string;
        balance: BigNumber;
      }
    >;

    depositEth(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      _commitment: BytesLike,
      balance: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    directdebit(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeDivider(overrides?: CallOverrides): Promise<[BigNumber]>;

    feelessToken(overrides?: CallOverrides): Promise<[string]>;

    nullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isNullified: boolean;
        withdrawalCount: BigNumber;
        lastDate: BigNumber;
      }
    >;

    setFeelessToken(
      newFeelesstoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    topUpETH(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    topUpTokens(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _owner(overrides?: CallOverrides): Promise<string>;

  calculateFee(
    denomination: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancel(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    hashes: [BytesLike, BytesLike],
    payee: string,
    debit: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitments(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, boolean, string, BigNumber] & {
      used: boolean;
      creator: string;
      createdDate: BigNumber;
      usesToken: boolean;
      token: string;
      balance: BigNumber;
    }
  >;

  depositEth(
    _commitment: BytesLike,
    balance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    _commitment: BytesLike,
    balance: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  directdebit(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    hashes: [BytesLike, BytesLike],
    payee: string,
    debit: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeDivider(overrides?: CallOverrides): Promise<BigNumber>;

  feelessToken(overrides?: CallOverrides): Promise<string>;

  nullifiers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isNullified: boolean;
      withdrawalCount: BigNumber;
      lastDate: BigNumber;
    }
  >;

  setFeelessToken(
    newFeelesstoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  topUpETH(
    _commitment: BytesLike,
    balance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  topUpTokens(
    _commitment: BytesLike,
    balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    hashes: [BytesLike, BytesLike],
    payee: string,
    debit: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _owner(overrides?: CallOverrides): Promise<string>;

    calculateFee(
      denomination: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, boolean, string, BigNumber] & {
        used: boolean;
        creator: string;
        createdDate: BigNumber;
        usesToken: boolean;
        token: string;
        balance: BigNumber;
      }
    >;

    depositEth(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      _commitment: BytesLike,
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    directdebit(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    feeDivider(overrides?: CallOverrides): Promise<BigNumber>;

    feelessToken(overrides?: CallOverrides): Promise<string>;

    nullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isNullified: boolean;
        withdrawalCount: BigNumber;
        lastDate: BigNumber;
      }
    >;

    setFeelessToken(
      newFeelesstoken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    topUpETH(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    topUpTokens(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BunnyDebitCancelled(bytes32,address,uint256)"(
      commitment?: BytesLike | null,
      tokenAddress?: null,
      withdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { commitment: string; tokenAddress: string; withdrawn: BigNumber }
    >;

    BunnyDebitCancelled(
      commitment?: BytesLike | null,
      tokenAddress?: null,
      withdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { commitment: string; tokenAddress: string; withdrawn: BigNumber }
    >;

    "CancelDirectDebit(bytes32,bytes32,address)"(
      commitment?: BytesLike | null,
      nullifierHash?: null,
      payee?: null
    ): TypedEventFilter<
      [string, string, string],
      { commitment: string; nullifierHash: string; payee: string }
    >;

    CancelDirectDebit(
      commitment?: BytesLike | null,
      nullifierHash?: null,
      payee?: null
    ): TypedEventFilter<
      [string, string, string],
      { commitment: string; nullifierHash: string; payee: string }
    >;

    "DepositETH(bytes32,address,uint256,uint256)"(
      commitment?: BytesLike | null,
      depositFor?: null,
      timestamp?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        commitment: string;
        depositFor: string;
        timestamp: BigNumber;
        balance: BigNumber;
      }
    >;

    DepositETH(
      commitment?: BytesLike | null,
      depositFor?: null,
      timestamp?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        commitment: string;
        depositFor: string;
        timestamp: BigNumber;
        balance: BigNumber;
      }
    >;

    "DepositToken(bytes32,address,uint256,uint256,address)"(
      commitment?: BytesLike | null,
      depositFor?: null,
      timestamp?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        commitment: string;
        depositFor: string;
        timestamp: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    DepositToken(
      commitment?: BytesLike | null,
      depositFor?: null,
      timestamp?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        commitment: string;
        depositFor: string;
        timestamp: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    "DirectDebit(bytes32,bytes32,address,uint256,uint256,uint256)"(
      commitment?: BytesLike | null,
      nullifierHash?: null,
      payee?: null,
      debitAmount?: null,
      debitTimesLeft?: null,
      feePaid?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        commitment: string;
        nullifierHash: string;
        payee: string;
        debitAmount: BigNumber;
        debitTimesLeft: BigNumber;
        feePaid: BigNumber;
      }
    >;

    DirectDebit(
      commitment?: BytesLike | null,
      nullifierHash?: null,
      payee?: null,
      debitAmount?: null,
      debitTimesLeft?: null,
      feePaid?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        commitment: string;
        nullifierHash: string;
        payee: string;
        debitAmount: BigNumber;
        debitTimesLeft: BigNumber;
        feePaid: BigNumber;
      }
    >;

    "TopUpETH(bytes32,uint256,uint256)"(
      commitment?: BytesLike | null,
      timestamp?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { commitment: string; timestamp: BigNumber; balance: BigNumber }
    >;

    TopUpETH(
      commitment?: BytesLike | null,
      timestamp?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { commitment: string; timestamp: BigNumber; balance: BigNumber }
    >;

    "TopUpToken(bytes32,uint256,uint256,address)"(
      commitment?: BytesLike | null,
      timestamp?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        commitment: string;
        timestamp: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    TopUpToken(
      commitment?: BytesLike | null,
      timestamp?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        commitment: string;
        timestamp: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;
  };

  estimateGas: {
    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFee(
      denomination: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    depositEth(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToken(
      _commitment: BytesLike,
      balance: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    directdebit(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeDivider(overrides?: CallOverrides): Promise<BigNumber>;

    feelessToken(overrides?: CallOverrides): Promise<BigNumber>;

    nullifiers(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setFeelessToken(
      newFeelesstoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    topUpETH(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    topUpTokens(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateFee(
      denomination: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositEth(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      _commitment: BytesLike,
      balance: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    directdebit(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeDivider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feelessToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeelessToken(
      newFeelesstoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    topUpETH(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    topUpTokens(
      _commitment: BytesLike,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      hashes: [BytesLike, BytesLike],
      payee: string,
      debit: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
