/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SwapTokensInterface extends ethers.utils.Interface {
  functions: {
    "exactInputSingleSwapParamsHash((uint256[8],bytes32,address,address,bytes32,bytes32),address[4],uint256[2],uint24)": FunctionFragment;
    "exactInputSingleSwapRelayed((uint256[8],bytes32,address,address,bytes32,bytes32),address[4],uint256[2],uint24)": FunctionFragment;
    "nullifierHashes(bytes32)": FunctionFragment;
    "ownerVerifier()": FunctionFragment;
    "swapRouter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exactInputSingleSwapParamsHash",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      [string, string, string, string],
      [BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingleSwapRelayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      [string, string, string, string],
      [BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "exactInputSingleSwapParamsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingleSwapRelayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;

  events: {
    "SwapRelayed(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapRelayed"): EventFragment;
}

export type SwapRelayedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    tokenIn: string;
    tokenOut: string;
    amountIn: BigNumber;
    amountOutMin: BigNumber;
  }
>;

export class SwapTokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SwapTokensInterface;

  functions: {
    exactInputSingleSwapParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { h: string }>;

    exactInputSingleSwapRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerVerifier(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  exactInputSingleSwapParamsHash(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _addressParams: [string, string, string, string],
    _amounts: [BigNumberish, BigNumberish],
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  exactInputSingleSwapRelayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _addressParams: [string, string, string, string],
    _amounts: [BigNumberish, BigNumberish],
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  ownerVerifier(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    exactInputSingleSwapParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    exactInputSingleSwapRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerVerifier(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SwapRelayed(address,address,uint256,uint256)"(
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOutMin?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
      }
    >;

    SwapRelayed(
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOutMin?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
      }
    >;
  };

  estimateGas: {
    exactInputSingleSwapParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSingleSwapRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    exactInputSingleSwapParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exactInputSingleSwapRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _addressParams: [string, string, string, string],
      _amounts: [BigNumberish, BigNumberish],
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
