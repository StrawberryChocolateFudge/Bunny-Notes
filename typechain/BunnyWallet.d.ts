/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BunnyWalletInterface extends ethers.utils.Interface {
  functions: {
    "approveERC20SpendByOwner(address,address,uint256)": FunctionFragment;
    "approveERC20SpendRelayed((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,uint256)": FunctionFragment;
    "approveERC721ByOwner(address,address,uint256,bool,bool)": FunctionFragment;
    "approveERC721ParamsHash((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,uint256,bool,bool)": FunctionFragment;
    "approveERC721Relayed((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,uint256,bool,bool)": FunctionFragment;
    "commitment()": FunctionFragment;
    "depositToBunnyNoteByOwner(address,address,bytes32,bool,bool)": FunctionFragment;
    "depositToBunnyNoteParamsHash((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,bytes32,bool,bool)": FunctionFragment;
    "depositToBunnyNoteRelayed((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,bytes32,bool,bool)": FunctionFragment;
    "getTokenBalance(address)": FunctionFragment;
    "initialize(address,bytes32,address)": FunctionFragment;
    "nullifierHashes(bytes32)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerValid((uint256[8],bytes32,address,address,bytes32,bytes32))": FunctionFragment;
    "ownerVerifier()": FunctionFragment;
    "receivedERC721Data(uint256)": FunctionFragment;
    "receivedERC721DataIndex()": FunctionFragment;
    "resetCommitment(bytes32)": FunctionFragment;
    "totalWeiReceived()": FunctionFragment;
    "transferERC721ByOwner(address,address,address,uint256)": FunctionFragment;
    "transferERC721ParamsHash((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,address,uint256)": FunctionFragment;
    "transferERC721Relayed((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,address,uint256)": FunctionFragment;
    "transferETHByOwner(address,uint256)": FunctionFragment;
    "transferETHRelayed((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,uint256)": FunctionFragment;
    "transferParamsHash((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,uint256)": FunctionFragment;
    "transferTokenByOwner(address,address,uint256)": FunctionFragment;
    "transferTokenRelayed((uint256[8],bytes32,address,address,bytes32,bytes32),address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveERC20SpendByOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC20SpendRelayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC721ByOwner",
    values: [string, string, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC721ParamsHash",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC721Relayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToBunnyNoteByOwner",
    values: [string, string, BytesLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToBunnyNoteParamsHash",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BytesLike,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToBunnyNoteRelayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BytesLike,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerValid",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivedERC721Data",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedERC721DataIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeiReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721ByOwner",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721ParamsHash",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721Relayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferETHByOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferETHRelayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferParamsHash",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenByOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenRelayed",
    values: [
      {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      string,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveERC20SpendByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC20SpendRelayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC721ByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC721ParamsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC721Relayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToBunnyNoteByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToBunnyNoteParamsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToBunnyNoteRelayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedERC721Data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedERC721DataIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeiReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721ByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721ParamsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721Relayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferETHByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferETHRelayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferParamsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenRelayed",
    data: BytesLike
  ): Result;

  events: {
    "ApproveERC721ByOwner(address,address,uint256,bool,bool)": EventFragment;
    "ApproveERC721Relayed(address,address,uint256,bool,bool)": EventFragment;
    "ApproveSpendByOwner(address,address,uint256)": EventFragment;
    "ApproveSpendRelayed(address,address,uint256)": EventFragment;
    "CommitmentReset(bytes32,bytes32)": EventFragment;
    "DepositBunnyNoteByOwner(address,address,bytes32,bool,bool)": EventFragment;
    "DepositBunnyNoteRelayed(address,address,bytes32,bool,bool)": EventFragment;
    "ERC721Received(address,address,uint256,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InitializedContract(address,bytes32,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "TransferERC721ByOwner(address,address,address,uint256)": EventFragment;
    "TransferERC721Relayed(address,address,address,uint256)": EventFragment;
    "TransferEthByOwner(address,uint256)": EventFragment;
    "TransferEthRelayed(address,uint256)": EventFragment;
    "TransferTokenByOwner(address,address,uint256)": EventFragment;
    "TransferTokenByRelayer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveERC721ByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveERC721Relayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveSpendByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveSpendRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitmentReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositBunnyNoteByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositBunnyNoteRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializedContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferERC721ByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferERC721Relayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferEthByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferEthRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTokenByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTokenByRelayer"): EventFragment;
}

export type ApproveERC721ByOwnerEvent = TypedEvent<
  [string, string, BigNumber, boolean, boolean] & {
    token: string;
    to: string;
    tokenId: BigNumber;
    forAll: boolean;
    approved: boolean;
  }
>;

export type ApproveERC721RelayedEvent = TypedEvent<
  [string, string, BigNumber, boolean, boolean] & {
    token: string;
    to: string;
    tokenId: BigNumber;
    forAll: boolean;
    approved: boolean;
  }
>;

export type ApproveSpendByOwnerEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    spender: string;
    amount: BigNumber;
  }
>;

export type ApproveSpendRelayedEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    spender: string;
    amount: BigNumber;
  }
>;

export type CommitmentResetEvent = TypedEvent<
  [string, string] & { oldCommitment: string; newCommitment: string }
>;

export type DepositBunnyNoteByOwnerEvent = TypedEvent<
  [string, string, string, boolean, boolean] & {
    _notesContract: string;
    token: string;
    commitment: string;
    cashNote: boolean;
    isERC20: boolean;
  }
>;

export type DepositBunnyNoteRelayedEvent = TypedEvent<
  [string, string, string, boolean, boolean] & {
    _notesContract: string;
    token: string;
    commitment: string;
    cashNote: boolean;
    isERC20: boolean;
  }
>;

export type ERC721ReceivedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    operator: string;
    from: string;
    tokenId: BigNumber;
    data: string;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type InitializedContractEvent = TypedEvent<
  [string, string, string] & {
    _ownerVerifier: string;
    _commitment: string;
    _owner: string;
  }
>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { from: string; amount: BigNumber }
>;

export type TransferERC721ByOwnerEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    token: string;
    from: string;
    to: string;
    tokenId: BigNumber;
  }
>;

export type TransferERC721RelayedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    token: string;
    from: string;
    to: string;
    tokenId: BigNumber;
  }
>;

export type TransferEthByOwnerEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type TransferEthRelayedEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type TransferTokenByOwnerEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; amount: BigNumber }
>;

export type TransferTokenByRelayerEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; amount: BigNumber }
>;

export class BunnyWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BunnyWalletInterface;

  functions: {
    approveERC20SpendByOwner(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveERC20SpendRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveERC721ByOwner(
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { h: string }>;

    approveERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitment(overrides?: CallOverrides): Promise<[string]>;

    depositToBunnyNoteByOwner(
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToBunnyNoteParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { h: string }>;

    depositToBunnyNoteRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    initialize(
      _ownerVerifier: string,
      _commitment: BytesLike,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerValid(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerVerifier(overrides?: CallOverrides): Promise<[string]>;

    receivedERC721Data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenContract: string; tokenId: BigNumber }
    >;

    receivedERC721DataIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    resetCommitment(
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalWeiReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferERC721ByOwner(
      _token: string,
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { h: string }>;

    transferERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferETHByOwner(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferETHRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { h: string }>;

    transferTokenByOwner(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTokenRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveERC20SpendByOwner(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveERC20SpendRelayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveERC721ByOwner(
    _token: string,
    _to: string,
    _tokenId: BigNumberish,
    _forAll: boolean,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveERC721ParamsHash(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _to: string,
    _tokenId: BigNumberish,
    _forAll: boolean,
    _approved: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  approveERC721Relayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _to: string,
    _tokenId: BigNumberish,
    _forAll: boolean,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitment(overrides?: CallOverrides): Promise<string>;

  depositToBunnyNoteByOwner(
    _notesContract: string,
    _token: string,
    _newCommitment: BytesLike,
    _cashNote: boolean,
    _isERC20Note: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToBunnyNoteParamsHash(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _notesContract: string,
    _token: string,
    _newCommitment: BytesLike,
    _cashNote: boolean,
    _isERC20Note: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  depositToBunnyNoteRelayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _notesContract: string,
    _token: string,
    _newCommitment: BytesLike,
    _cashNote: boolean,
    _isERC20Note: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _ownerVerifier: string,
    _commitment: BytesLike,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerValid(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerVerifier(overrides?: CallOverrides): Promise<string>;

  receivedERC721Data(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { tokenContract: string; tokenId: BigNumber }
  >;

  receivedERC721DataIndex(overrides?: CallOverrides): Promise<BigNumber>;

  resetCommitment(
    newCommitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalWeiReceived(overrides?: CallOverrides): Promise<BigNumber>;

  transferERC721ByOwner(
    _token: string,
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferERC721ParamsHash(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _transferFrom: string,
    _transferTo: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferERC721Relayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _transferFrom: string,
    _transferTo: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferETHByOwner(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferETHRelayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _transferTo: string,
    _transferAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferParamsHash(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _transferTo: string,
    _transferAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferTokenByOwner(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTokenRelayed(
    _zkOwner: {
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      commitment: BytesLike;
      smartContract: string;
      relayer: string;
      paramsHash: BytesLike;
      nullifierHash: BytesLike;
    },
    _token: string,
    _transferTo: string,
    _transferAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveERC20SpendByOwner(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveERC20SpendRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveERC721ByOwner(
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approveERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    approveERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    commitment(overrides?: CallOverrides): Promise<string>;

    depositToBunnyNoteByOwner(
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToBunnyNoteParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    depositToBunnyNoteRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _ownerVerifier: string,
      _commitment: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerValid(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerVerifier(overrides?: CallOverrides): Promise<string>;

    receivedERC721Data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenContract: string; tokenId: BigNumber }
    >;

    receivedERC721DataIndex(overrides?: CallOverrides): Promise<BigNumber>;

    resetCommitment(
      newCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWeiReceived(overrides?: CallOverrides): Promise<BigNumber>;

    transferERC721ByOwner(
      _token: string,
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferETHByOwner(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferETHRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferTokenByOwner(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApproveERC721ByOwner(address,address,uint256,bool,bool)"(
      token?: null,
      to?: null,
      tokenId?: null,
      forAll?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, boolean],
      {
        token: string;
        to: string;
        tokenId: BigNumber;
        forAll: boolean;
        approved: boolean;
      }
    >;

    ApproveERC721ByOwner(
      token?: null,
      to?: null,
      tokenId?: null,
      forAll?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, boolean],
      {
        token: string;
        to: string;
        tokenId: BigNumber;
        forAll: boolean;
        approved: boolean;
      }
    >;

    "ApproveERC721Relayed(address,address,uint256,bool,bool)"(
      token?: null,
      to?: null,
      tokenId?: null,
      forAll?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, boolean],
      {
        token: string;
        to: string;
        tokenId: BigNumber;
        forAll: boolean;
        approved: boolean;
      }
    >;

    ApproveERC721Relayed(
      token?: null,
      to?: null,
      tokenId?: null,
      forAll?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, boolean],
      {
        token: string;
        to: string;
        tokenId: BigNumber;
        forAll: boolean;
        approved: boolean;
      }
    >;

    "ApproveSpendByOwner(address,address,uint256)"(
      token?: null,
      spender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; spender: string; amount: BigNumber }
    >;

    ApproveSpendByOwner(
      token?: null,
      spender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; spender: string; amount: BigNumber }
    >;

    "ApproveSpendRelayed(address,address,uint256)"(
      token?: null,
      spender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; spender: string; amount: BigNumber }
    >;

    ApproveSpendRelayed(
      token?: null,
      spender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; spender: string; amount: BigNumber }
    >;

    "CommitmentReset(bytes32,bytes32)"(
      oldCommitment?: null,
      newCommitment?: null
    ): TypedEventFilter<
      [string, string],
      { oldCommitment: string; newCommitment: string }
    >;

    CommitmentReset(
      oldCommitment?: null,
      newCommitment?: null
    ): TypedEventFilter<
      [string, string],
      { oldCommitment: string; newCommitment: string }
    >;

    "DepositBunnyNoteByOwner(address,address,bytes32,bool,bool)"(
      _notesContract?: null,
      token?: null,
      commitment?: null,
      cashNote?: null,
      isERC20?: null
    ): TypedEventFilter<
      [string, string, string, boolean, boolean],
      {
        _notesContract: string;
        token: string;
        commitment: string;
        cashNote: boolean;
        isERC20: boolean;
      }
    >;

    DepositBunnyNoteByOwner(
      _notesContract?: null,
      token?: null,
      commitment?: null,
      cashNote?: null,
      isERC20?: null
    ): TypedEventFilter<
      [string, string, string, boolean, boolean],
      {
        _notesContract: string;
        token: string;
        commitment: string;
        cashNote: boolean;
        isERC20: boolean;
      }
    >;

    "DepositBunnyNoteRelayed(address,address,bytes32,bool,bool)"(
      _notesContract?: null,
      token?: null,
      commitment?: null,
      cashNote?: null,
      isERC20?: null
    ): TypedEventFilter<
      [string, string, string, boolean, boolean],
      {
        _notesContract: string;
        token: string;
        commitment: string;
        cashNote: boolean;
        isERC20: boolean;
      }
    >;

    DepositBunnyNoteRelayed(
      _notesContract?: null,
      token?: null,
      commitment?: null,
      cashNote?: null,
      isERC20?: null
    ): TypedEventFilter<
      [string, string, string, boolean, boolean],
      {
        _notesContract: string;
        token: string;
        commitment: string;
        cashNote: boolean;
        isERC20: boolean;
      }
    >;

    "ERC721Received(address,address,uint256,bytes)"(
      operator?: null,
      from?: null,
      tokenId?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { operator: string; from: string; tokenId: BigNumber; data: string }
    >;

    ERC721Received(
      operator?: null,
      from?: null,
      tokenId?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { operator: string; from: string; tokenId: BigNumber; data: string }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "InitializedContract(address,bytes32,address)"(
      _ownerVerifier?: null,
      _commitment?: null,
      _owner?: null
    ): TypedEventFilter<
      [string, string, string],
      { _ownerVerifier: string; _commitment: string; _owner: string }
    >;

    InitializedContract(
      _ownerVerifier?: null,
      _commitment?: null,
      _owner?: null
    ): TypedEventFilter<
      [string, string, string],
      { _ownerVerifier: string; _commitment: string; _owner: string }
    >;

    "Received(address,uint256)"(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    Received(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    "TransferERC721ByOwner(address,address,address,uint256)"(
      token?: null,
      from?: null,
      to?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; from: string; to: string; tokenId: BigNumber }
    >;

    TransferERC721ByOwner(
      token?: null,
      from?: null,
      to?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; from: string; to: string; tokenId: BigNumber }
    >;

    "TransferERC721Relayed(address,address,address,uint256)"(
      token?: null,
      from?: null,
      to?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; from: string; to: string; tokenId: BigNumber }
    >;

    TransferERC721Relayed(
      token?: null,
      from?: null,
      to?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; from: string; to: string; tokenId: BigNumber }
    >;

    "TransferEthByOwner(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    TransferEthByOwner(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "TransferEthRelayed(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    TransferEthRelayed(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "TransferTokenByOwner(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    TransferTokenByOwner(
      token?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    "TransferTokenByRelayer(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    TransferTokenByRelayer(
      token?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    approveERC20SpendByOwner(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveERC20SpendRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveERC721ByOwner(
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitment(overrides?: CallOverrides): Promise<BigNumber>;

    depositToBunnyNoteByOwner(
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToBunnyNoteParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositToBunnyNoteRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _ownerVerifier: string,
      _commitment: BytesLike,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerValid(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    receivedERC721Data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedERC721DataIndex(overrides?: CallOverrides): Promise<BigNumber>;

    resetCommitment(
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalWeiReceived(overrides?: CallOverrides): Promise<BigNumber>;

    transferERC721ByOwner(
      _token: string,
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferETHByOwner(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferETHRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferTokenByOwner(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTokenRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveERC20SpendByOwner(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveERC20SpendRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveERC721ByOwner(
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _to: string,
      _tokenId: BigNumberish,
      _forAll: boolean,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToBunnyNoteByOwner(
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToBunnyNoteParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToBunnyNoteRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _notesContract: string,
      _token: string,
      _newCommitment: BytesLike,
      _cashNote: boolean,
      _isERC20Note: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _ownerVerifier: string,
      _commitment: BytesLike,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerValid(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedERC721Data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivedERC721DataIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetCommitment(
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalWeiReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferERC721ByOwner(
      _token: string,
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferERC721ParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferERC721Relayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferFrom: string,
      _transferTo: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferETHByOwner(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferETHRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferParamsHash(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferTokenByOwner(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenRelayed(
      _zkOwner: {
        proof: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        commitment: BytesLike;
        smartContract: string;
        relayer: string;
        paramsHash: BytesLike;
        nullifierHash: BytesLike;
      },
      _token: string,
      _transferTo: string,
      _transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
